searchState.loadedDescShard("test_casing", 0, "Minimalistic testing framework for generating tests for a …\nCartesian product of several test cases.\nIterator over test cases in <code>Product</code>.\nContainer for test cases based on a lazily evaluated …\nCreates <code>TestCases</code> based on the provided expression …\nWraps a tested function to add retries, timeouts etc.\nTest decorator trait and implementations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new set of test cases.\nFlattens a parameterized test into a collection of test …\nTest decorator.\nTest decorator that retries a wrapped test the specified …\nTest decorator that retries a wrapped test a certain …\nTest decorator that makes runs of decorated tests …\nTested function or closure.\nTest decorator that fails a wrapped test if it doesn’t …\nMakes the decorated tests abort immediately if one test …\nDecorates the provided test function and runs the test.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines a timeout with the specified number of …\nCreates a new test sequence.\nConverts this retry specification to only retry specific …\nDefines a timeout with the specified number of seconds.\nSpecified the number of retries. The delay between retries …\nSpecifies the delay between retries.")